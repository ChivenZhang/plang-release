package std::collection;

import std::Object;

public class HashMap : Map
{
	friend class HashMapIterator;
	friend class HashMapValueIterator;

	d_bucket->ArrayList[];
	d_size->int;
	public HashMap()
	{
		d_bucket=new ArrayList[32];
		d_size=0;
		i->int=0;
		while(i<d_bucket.length){
			d_bucket[i++]=new ArrayList();
		}
	}
	public HashMap(size->int)
	{
		size=size<=32?32:(1024<size?1024:size);
		d_bucket=new ArrayList[size];
		d_size=0;
		i->int=0;
		while(i<d_bucket.length){
			d_bucket[i++]=new ArrayList();
		}
	}
	public put(k->Object, v->Object)
	{
		if(k==null)return;
		buckNum->const int=d_bucket.length;
		hashcode->int=k.hashcode();
		index->int=(hashcode%buckNum+buckNum)%buckNum;
		vec->ArrayList=d_bucket[index];
		i->int=0;
		size->int=vec.size();
		while(i<size){
			pair->HashMapNode=vec.get(i);
			if(pair.key.hashcode()==hashcode){
				pair.value=v;
				return;
			}
			++i;
		}
		vec.add(new HashMapNode(k, v));
		++d_size;
	}
	public get(k->Object)->Object
	{
		if(k==null)return null;
		buckNum->const int=d_bucket.length;
		hashcode->int=k.hashcode();
		index->int=(hashcode%buckNum+buckNum)%buckNum;
		vec->ArrayList=d_bucket[index];
		i->int=0;
		size->int=vec.size();
		while(i<size){
			pair->HashMapNode=vec.get(i);
			if(pair.key.hashcode()==hashcode){
				return pair.value;
			}
			++i;
		}
		return null;
	}
	public remove(k->Object)
	{
		if(k==null)return;
		buckNum->const int=d_bucket.length;
		hashcode->int=k.hashcode();
		index->int=(hashcode%buckNum+buckNum)%buckNum;
		vec->ArrayList=d_bucket[index];
		i->int=0;
		size->int=vec.size();
		while(i<size){
			pair->HashMapNode=vec.get(i);
			if(pair.key.hashcode()==hashcode){
				vec.remove(i);
				--d_size;
				return;
			}
			++i;
		}
	}
	public exist(k->Object)->boolean
	{
		if(k==null)return false;
		buckNum->const int=d_bucket.length;
		hashcode->int=k.hashcode();
		index->int=(hashcode%buckNum+buckNum)%buckNum;
		vec->ArrayList=d_bucket[index];
		i->int=0;
		size->int=vec.size();
		while(i<size){
			pair->HashMapNode=vec.get(i);
			if(pair.key.hashcode()==hashcode){
				return true;
			}
			++i;
		}
		return false;
	}
	public empty()->boolean{return d_size==0;}
	public clear()
	{
		d_bucket=new ArrayList[32];
		d_size=0;
	}
	public size()->int{return d_size;}
	public keys()->Iterator{return new HashMapIterator(this);}
	public values()->Iterator{return new HashMapValueIterator(this);}
}

class HashMapNode : Object
{
	public key->Object;
	public value->Object;
	public HashMapNode(k->Object,v->Object){key=k;value=v;}
	public equals(e->Object)->boolean
	{
		return (e instanceof HashMapNode) && (e->(HashMapNode).key.hashcode()==key.hashcode()); 
	}
}

class HashMapIterator : Iterator
{
	protected d_map->HashMap;
	protected d_bkrow->int=0;
	protected d_bkcol->int=0;
	public HashMapIterator(map->HashMap){d_map=map;}
	public hasNext()->boolean
	{
		buckets->ArrayList[]=d_map.d_bucket;
		while(d_bkrow<buckets.length){
			bucket->ArrayList=buckets[d_bkrow];
			if(d_bkcol<bucket.size())return true;
			++d_bkrow;
			d_bkcol=0;
		}
		return false;
	}
	public next()->Object
	{
		buckets->ArrayList[]=d_map.d_bucket;
		if(d_bkrow<buckets.length){
			bucket->ArrayList=buckets[d_bkrow];
			if(d_bkcol<bucket.size()){
				return bucket.get(d_bkcol++)->(HashMapNode).key;
			}
			else return null;
		}
		else return null;
	}
}

class HashMapValueIterator : HashMapIterator
{
	public HashMapValueIterator(map->HashMap){super(map);}
	public next()->Object
	{
		buckets->ArrayList[]=d_map.d_bucket;
		if(d_bkrow<buckets.length){
			bucket->ArrayList=buckets[d_bkrow];
			if(d_bkcol<bucket.size()){
				return bucket.get(d_bkcol++)->(HashMapNode).value;
			}
			else return null;
		}
		else return null;
	}
}
