package std::collection;

import std::Object;

public class TreeSet : Collection 
{
	private d_node->TreeSetNode;
	private d_size->int=0;
	public TreeSet(){}
	public add(e->Object)
	{
		if(e==null)return;
		node->TreeSetNode=d_node;
		if(node==null){
			d_node=new TreeSetNode(e);
			++d_size;
			return;
		}
		else{
			hashcode0->int=e.hashcode();
			while(true){
				hashcode1->int=node.v.hashcode();
				if(hashcode0<hashcode1){
					if(node.l==null){
						node.l=new TreeSetNode(e);
						++d_size;
						return;
					}
					else node=node.l;
				}
				else if(hashcode1<hashcode0){
					if(node.r==null){
						node.r=new TreeSetNode(e);
						++d_size;
						return;
					}
					else node=node.r;
				}
				else {
					node.v=e;
					return;
				}
			}
		}
	}
	public remove(e->Object)
	{
		if(e==null)return;
		hashcode0->int=e.hashcode();
		node->TreeSetNode=d_node;
		last->TreeSetNode=null;
		while(node!=null){
			hashcode1->int=node.v.hashcode();
			if(hashcode0<hashcode1){
				last=node;
				node=node.l;
			}
			else if(hashcode1<hashcode0){
				last=node;
				node=node.r;
			}
			else {
				if(last==null)d_node=null;
				else{
					if(last.l==node)last.l=null;
					else if(last.r==node)last.r=null;
				}
				--d_size;
				return;
			}
		}
	}
	public exist(e->Object)->boolean
	{
		if(e==null)return false;
		hashcode0->int=e.hashcode();
		node->TreeSetNode=d_node;
		while(node!=null){
			hashcode1->int=node.v.hashcode();
			if(hashcode0<hashcode1)node=node.l;
			else if(hashcode1<hashcode0)node=node.r;
			else return true;
		}
		return false;
	}
	public empty()->boolean{return d_size==0;}
	public clear(){d_node=null;d_size=0;}
	public size()->int{return d_size;}
	public iterator()->Iterator{return new TreeSetIterator(d_node);}
}

class TreeSetNode : Object
{
	public l->TreeSetNode;
	public r->TreeSetNode;
	public v->Object;
	public TreeSetNode(v->Object){this.v=v;}
}

class TreeSetIterator : Iterator
{
	private d_stack->Stack;
	public TreeSetIterator(node->TreeSetNode)
	{
		if(node==null)return;
		d_stack=new Stack();
		d_stack.push(node);
	}
	public hasNext()->boolean
	{
		if(d_stack==null)return false;
		return !d_stack.empty();
	}
	public next()->Object
	{
		if(d_stack==null)return null;
		if(d_stack.empty())return null;
		else{
			node->TreeSetNode=d_stack.pop();
			if(node.r!=null)d_stack.push(node.r);
			if(node.l!=null)d_stack.push(node.l);
			return node.v;
		}
	}
}